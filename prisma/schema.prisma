// Prisma schema for NextAuth + custom credentials
// Generator and datasource
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models per official schema with additions
model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String?  @unique
  emailVerified      DateTime?
  image              String?

  // Custom fields
  registrationNumber String?  @unique
  phoneNumber        String?
  passwordHash       String?
  isAdmin            Boolean  @default(false)
  isBanned           Boolean  @default(false)
  timeoutUntil       DateTime?

  accounts           Account[]
  sessions           Session[]
  requests           Request[]
  feedbacks          Feedback[]
  notifications      Notification[]
  interests          Interest[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Hostel swap request model
model Request {
 id            String   @id @default(cuid())
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 currentHostel String
 currentBlock  String?
 currentFloor  String?
 currentRoom   String?
 desiredHostel String
 desiredBlock  String?
 desiredFloor  String?
 desiredRoom   String?
 message       String?
 roomType      String   // AC or Non-AC
 seater        Int      // 1, 2, 3, 4, or 5
 status        String   @default("open") // open, matched, closed
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt

 @@index([status, createdAt])
}

// Interest tracking model - tracks when users show interest in requests
model Interest {
  id          String   @id @default(cuid())
  userId      String   // Person who showed interest
  requestId   String   // Request they're interested in
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([userId, requestId]) // Prevent duplicate interests
  @@index([requestId, createdAt])
}

// Notification model
model Notification {
  id            String   @id @default(cuid())
  userId        String   // Owner of the request who receives the notification
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type          String   // "interest" for now, can add more types later
  message       String   // "John Doe showed interest in your request"
  requestId     String?  // Related request ID
  interestedBy  String?  // User ID of person who showed interest
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId, isRead, createdAt])
}

// Feedback model
model Feedback {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject   String
  message   String
  status    String   @default("new") // new, read, resolved
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status, createdAt])
}

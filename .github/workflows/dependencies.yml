name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: "0 9 * * 1"
  workflow_dispatch:

jobs:
  update-dependencies:
    name: Check & Update Dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Check for outdated packages
        id: outdated
        run: |
          npm outdated --json > outdated.json || true
          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Issue for Updates
        if: steps.outdated.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const outdated = JSON.parse(fs.readFileSync('outdated.json', 'utf8'));

            let body = '## ðŸ“¦ Outdated Dependencies\n\n';
            body += 'The following packages have updates available:\n\n';
            body += '| Package | Current | Wanted | Latest |\n';
            body += '|---------|---------|--------|--------|\n';

            for (const [pkg, info] of Object.entries(outdated)) {
              body += `| ${pkg} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
            }

            body += '\n---\n';
            body += '**Action Required:** Review these updates and create a PR to update dependencies.\n';
            body += '**Run:** `npm update` to update to wanted versions or manually update package.json for major updates.\n';

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'dependencies',
              state: 'open'
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Dependencies] Weekly Update Check - ${new Date().toISOString().split('T')[0]}`,
                body: body,
                labels: ['dependencies', 'maintenance']
              });
            }

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        id: audit
        run: |
          npm audit --json > audit.json || true

      - name: Create Security Issue
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const audit = JSON.parse(fs.readFileSync('audit.json', 'utf8'));

            if (audit.metadata && audit.metadata.vulnerabilities) {
              const vulns = audit.metadata.vulnerabilities;
              const total = Object.values(vulns).reduce((a, b) => a + b, 0);
              
              if (total > 0) {
                let body = '## ðŸ”’ Security Vulnerabilities Detected\n\n';
                body += `**Total Vulnerabilities:** ${total}\n\n`;
                body += `- Critical: ${vulns.critical || 0}\n`;
                body += `- High: ${vulns.high || 0}\n`;
                body += `- Moderate: ${vulns.moderate || 0}\n`;
                body += `- Low: ${vulns.low || 0}\n\n`;
                body += '**Action Required:** Run `npm audit fix` to automatically fix vulnerabilities.\n';
                body += 'For vulnerabilities that cannot be automatically fixed, review the audit report and update manually.\n';
                
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: 'security',
                  state: 'open'
                });
                
                if (issues.data.length === 0) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `[Security] Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
                    body: body,
                    labels: ['security', 'high-priority']
                  });
                }
              }
            }
